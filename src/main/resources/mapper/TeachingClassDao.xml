<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.server.edu.election.dao.TeachingClassDao">
  <resultMap id="BaseResultMap" type="com.server.edu.election.entity.TeachingClass">
    <id column="ID_" jdbcType="BIGINT" property="id" />
    <result column="TASK_ID_" jdbcType="BIGINT" property="taskId" />
    <result column="CODE_" jdbcType="VARCHAR" property="code" />
    <result column="IS_MEDIA_" jdbcType="INTEGER" property="isMedia" />
    <result column="ROOM_TYPE_" jdbcType="VARCHAR" property="roomType" />
    <result column="TEACHING_LANGUAGE_" jdbcType="VARCHAR" property="teachingLanguage" />
    <result column="COURSE_LABEL_ID_" jdbcType="BIGINT" property="courseLabelId" />
    <result column="ASSESSMENT_MODE_" jdbcType="VARCHAR" property="assessmentMode" />
    <result column="PERIOD_" jdbcType="DOUBLE" property="period" />
    <result column="ARRANGE_MODE_" jdbcType="VARCHAR" property="arrangeMode" />
    <result column="WEEK_HOUR_" jdbcType="DOUBLE" property="weekHour" />
    <result column="CLASS_HOUR_" jdbcType="DOUBLE" property="classHour" />
    <result column="MEDIA_HOUR_" jdbcType="DOUBLE" property="mediaHour" />
    <result column="START_WEEK_" jdbcType="INTEGER" property="startWeek" />
    <result column="END_WEEK_" jdbcType="INTEGER" property="endWeek" />
    <result column="TOTAL_WEEK_" jdbcType="INTEGER" property="totalWeek" />
    <result column="CAMPUS_" jdbcType="VARCHAR" property="campus" />
    <result column="CLASS_TYPE_" jdbcType="VARCHAR" property="classType" />
    <result column="NUMBER_" jdbcType="INTEGER" property="number" />
    <result column="ELC_NUMBER_" jdbcType="INTEGER" property="elcNumber" />
    <result column="PRE_ARRANGE_FLAG_" jdbcType="INTEGER" property="preArrangeFlag" />
    <result column="MAN_ARRANGE_FLAG_" jdbcType="INTEGER" property="manArrangeFlag" />
    <result column="DEPLOY_FLAG_" jdbcType="INTEGER" property="deployFlag" />
    <result column="REMARK_" jdbcType="VARCHAR" property="remark" />
    <result column="RESERVE_NUMBER_" jdbcType="INTEGER" property="reserveNumber" />
    <result column="CREATED_AT_" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="UPDATED_AT_" jdbcType="TIMESTAMP" property="updatedAt" />
    <result column="NAME_" jdbcType="VARCHAR" property="name" />
  </resultMap>

  <resultMap type="com.server.edu.election.vo.TeachingClassVo" id="TeachingClassVoMap" extends="BaseResultMap">
  	<result column="COURSE_NAME_" jdbcType="VARCHAR" property="courseName" />
  	<result column="COURSE_CODE_" jdbcType="VARCHAR" property="courseCode" />
  	<result column="CREDITS_" jdbcType="DOUBLE" property="credits" />
  	<result column="CAMPUS_" jdbcType="VARCHAR" property="campus" />
  	<result column="FACULTY_" jdbcType="VARCHAR" property="faculty" />
  	<result column="classNumber" jdbcType="INTEGER" property="classNumber" />
  	<result column="limitFaculty" jdbcType="VARCHAR" property="limitFaculty" />
  	<result column="limitTrainingLevel" jdbcType="VARCHAR" property="limitTrainingLevel" />
  	<result column="limitTrainingCategory" jdbcType="VARCHAR" property="limitTrainingCategory" />
  	<result column="limitSpcialPlan" jdbcType="VARCHAR" property="limitSpcialPlan" />
  	<result column="limitIsOverseas" jdbcType="INTEGER" property="limitIsOverseas" />
  	<result column="limitIsDivsex" jdbcType="INTEGER" property="limitIsDivsex" />
  	<result column="NUMBER_MALE_" jdbcType="INTEGER" property="numberMale" />
  	<result column="NUMBER_FEMALE_" jdbcType="INTEGER" property="numberFemale" />
  	<result column="limitGrade" jdbcType="INTEGER" property="limitGrade" />
  	<result column="limitProfession" jdbcType="VARCHAR" property="limitProfession" />
  	<result column="limitDirectionCode" jdbcType="VARCHAR" property="limitDirectionCode" />
  	<result column="roomId" jdbcType="VARCHAR" property="roomId" />
  	<result column="firstTurnNum" jdbcType="INTEGER" property="firstTurnNum" />
  	<result column="secondTurnNum" jdbcType="INTEGER" property="secondTurnNum" />
  	<result column="LABEL_NAME_" jdbcType="VARCHAR" property="labelName" />
  	<result column="NATURE_" jdbcType="VARCHAR" property="nature" />
  	<result column="teacherCodes" jdbcType="VARCHAR" property="teacherCodes" />
  	<result column="BIND_CLASS_ID_" jdbcType="VARCHAR" property="bindClassId" />
  	<result column="IS_ELECTIVE_" jdbcType="INTEGER" property="isElective"/>
  </resultMap>
  <select id="listPage" parameterType="com.server.edu.election.query.ElcResultQuery" resultMap="TeachingClassVoMap">
    select distinct
    t1.ID_,
	t1.CODE_,
	t1.NAME_,
	t1.ASSESSMENT_MODE_,
	t1.TEACHING_WAY_,
	t1.TEACHING_LANGUAGE_,
	t1.COURSE_LABEL_ID_,
	t1.PERIOD_,
	t1.WEEK_HOUR_,
	t1.CAMPUS_,
	t1.NUMBER_,
	t1.ELC_NUMBER_,
	t1.RESERVE_NUMBER_,
	t1.ASSISTANT_NUMBER_,
	t1.REMARK_,
	t8.BIND_CLASS_ID_,
    t3.COURSE_CODE_, t3.COURSE_NAME_, t3.CREDITS_, room.ROOM_ID_ roomId,
    t3.FACULTY_,
    t3.NATURE_,
    t3.IS_ELECTIVE_,
    GROUP_CONCAT(DISTINCT t7.`TEACHER_CODE_`) teacherCodes
    <if test="isHaveLimit !=null and isHaveLimit ==1">
	    ,t5.FACULTY_ limitFaculty,t5.TRAINING_LEVEL_ limitTrainingLevel,
	    t5.TRAINING_CATEGORY_ limitTrainingCategory,t5.SPCIAL_PLAN_ limitSpcialPlan,
	    t5.IS_OVERSEAS_ limitIsOverseas,t5.IS_DIVSEX_ limitIsDivsex,
	    t5.NUMBER_MALE_,t5.NUMBER_FEMALE_,t6.GRADE_ limitGrade,
	    t6.PROFESSION_ limitProfession,t6.DIRECTION_CODE_ limitDirectionCode
    </if>
    from
	teaching_class_t t1
	join teaching_task_t t2 ON t2.ID_ = t1.TASK_ID_
	join course_open_t t3 ON (t3.ID_ = t2.COURSE_OPEN_ID_ and t3.PROJ_ID_ =1)
    <if test="isHaveLimit !=null and isHaveLimit ==1">
    left join teaching_class_elective_restrict_attr_t t5 on t5.TEACHING_CLASS_ID_ = t1.ID_
	left join teaching_class_elective_restrict_profession_t t6 on t6.TEACHING_CLASS_ID_ =t1.ID_
    </if>
	join teaching_class_arrange_time_t time on (t1.ID_ = time.TEACHING_CLASS_ID_ and time.TYPE_ =2)
	join teaching_class_arrange_room_t room on room.ARRANGE_TIME_ID_ = time.ID_
	LEFT JOIN teaching_class_teacher_t t7 ON t7.TEACHING_CLASS_ID_ = t1.ID_ AND t7.`TYPE_` = 0
    left join elc_teaching_class_bind_t t8 on (t8.TEACHING_CLASS_ID_ = t1.ID_)
    <where>
      t1.DELETE_STATUS_ = 0
      and t3.CALENDAR_ID_ = #{calendarId}
      and t1.DEPLOY_FLAG_ &gt; 0
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(teachingClassCode)">
        and t1.CODE_ = #{teachingClassCode,jdbcType=VARCHAR}
      </if>
      <if test="isChange !=null and isChange ==1">
        and t1.ID_ != #{teachingClassId}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(isElective)">
        and t3.IS_ELECTIVE_ = #{isElective}
      </if>
        <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(trainingLevel)">
            and t3.TRAINING_LEVEL_ = #{trainingLevel}
        </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(courseLabelId)">
        and t1.COURSE_LABEL_ID_ = #{courseLabelId}
      </if>
      <if test="actualAndUpper != null and actualAndUpper !=0 and actualAndUpper==1">
        and t1.ELC_NUMBER_ &gt; t1.NUMBER_
      </if>
      <if test="actualAndUpper != null and actualAndUpper !=0 and actualAndUpper==2">
        and t1.ELC_NUMBER_ &lt; t1.NUMBER_
      </if>
      <if test="actualAndUpper != null and actualAndUpper !=0 and actualAndUpper==3">
        and t1.ELC_NUMBER_ = t1.NUMBER_
      </if>
      <if test="minUpperNumber != null and minUpperNumber !=0">
        and t1.NUMBER_ &gt; #{minUpperNumber}
      </if>
      <if test="maxUpperNumber != null and maxUpperNumber !=0">
        and t1.NUMBER_ &lt; #{maxUpperNumber}
      </if>
       <if test="minActualNumber != null and minActualNumber !=0">
        and t1.ELC_NUMBER_ &gt; #{minActualNumber}
      </if>
      <if test="maxActualNumber != null and maxActualNumber !=0">
        and t1.ELC_NUMBER_ &lt; #{maxActualNumber}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(manArrangeFlag)">
        and t1.MAN_ARRANGE_FLAG_ = #{manArrangeFlag}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(courseCode)">
        and t3.COURSE_CODE_ = #{courseCode}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(courseName)">
        and t3.COURSE_NAME_ = #{courseName}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(campus)">
        and t1.CAMPUS_ = #{campus}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(projectId)">
        and t3.PROJ_ID_ = #{projectId}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(faculty)">
        and t3.FACULTY_ = #{faculty}
      </if>
      <if test="credits!=null and credits!=0">
        and t3.CREDITS_ = #{credits}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(includeCodes)">
  		and t3.COURSE_CODE_ in 
  		<foreach collection="includeCodes" open="(" separator="," close=")" item="courseCode">
            #{courseCode}
         </foreach>
  	  </if>
  	   <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(keyword)">
  		and (t1.CODE_ like CONCAT(#{keyword}, '%') or t3.COURSE_CODE_ like CONCAT(#{keyword}, '%') OR t3.COURSE_NAME_ like CONCAT(#{keyword}, '%'))
  	  </if>
    </where>
       GROUP BY t1.ID_
 	  <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(teacherCode)">
 	    HAVING (select count(t4.id_) from teaching_class_teacher_t t4
 	    	where t4.TEACHING_CLASS_ID_ = t1.ID_ and t4.TYPE_=0 and t4.TEACHER_CODE_ = #{teacherCode} ) > 0
 	  </if>
  </select>

    <select id="listScreeningPage" parameterType="com.server.edu.election.query.ElcResultQuery" resultMap="TeachingClassVoMap">
    select t8.* from (
    select distinct
    t1.ID_,
	t1.CODE_,
	t1.NAME_,
	t1.ASSESSMENT_MODE_,
	t1.TEACHING_WAY_,
	t1.TEACHING_LANGUAGE_,
	t1.COURSE_LABEL_ID_,
	t1.PERIOD_,
	t1.WEEK_HOUR_,
	t1.CAMPUS_,
	t1.NUMBER_,
	t1.ELC_NUMBER_,
	t1.RESERVE_NUMBER_,
	t1.ASSISTANT_NUMBER_,
	t1.REMARK_,
    t3.COURSE_CODE_, t3.COURSE_NAME_, t3.CREDITS_, room.ROOM_ID_ roomId,
    t3.FACULTY_,
    t3.NATURE_,
    t3.IS_ELECTIVE_,
    label.LABEL_NAME_
    ,CASE WHEN t7.TURN_ = 1 THEN
    count(t7.ID_) END firstTurnNum,
    CASE WHEN t7.TURN_ = 2 THEN
	count(t7.ID_) END secondTurnNum,
	GROUP_CONCAT(DISTINCT t7.`TEACHER_CODE_`) teacherCodes
    from
	teaching_class_t t1
	join teaching_task_t t2 ON t2.ID_ = t1.TASK_ID_
	join course_open_t t3 ON t3.ID_ = t2.COURSE_OPEN_ID_ and t3.PROJ_ID_ =1
	join teaching_class_arrange_time_t time on (t1.ID_ = time.TEACHING_CLASS_ID_ and time.TYPE_ =2)
	join teaching_class_arrange_room_t room on room.ARRANGE_TIME_ID_ = time.ID_
    join elc_course_takes_t_${index} t7 on t7.TEACHING_CLASS_ID_ = t1.ID_ and t3.CALENDAR_ID_ = t7.CALENDAR_ID_
    left join elc_screening_label_t label on label.CALENDAR_ID_ = t3.CALENDAR_ID_
    LEFT JOIN teaching_class_teacher_t t8 ON t8.TEACHING_CLASS_ID_ = t1.ID_ AND t8.`TYPE_` = 0
    <where>
      t1.DELETE_STATUS_ = 0
      and t3.CALENDAR_ID_ = #{calendarId}
      and t1.DEPLOY_FLAG_ &gt; 0
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(teachingClassCode)">
        and t1.CODE_ = #{teachingClassCode,jdbcType=VARCHAR}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(teachingClassIds)">
        and t1.ID_ in
         <foreach collection="teachingClassIds" open="(" separator="," close=")" item="id">
            #{id}
         </foreach>
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(isElective)">
        and t3.IS_ELECTIVE_ = #{isElective}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(courseLabelId)">
        and t1.COURSE_LABEL_ID_ = #{courseLabelId}
      </if>
      <if test="actualAndUpper != null and actualAndUpper !=0 and actualAndUpper==1">
        and t1.ELC_NUMBER_ &gt; t1.NUMBER_
      </if>
      <if test="actualAndUpper != null and actualAndUpper !=0 and actualAndUpper==2">
        and t1.ELC_NUMBER_ &lt; t1.NUMBER_
      </if>
      <if test="actualAndUpper != null and actualAndUpper !=0 and actualAndUpper==3">
        and t1.ELC_NUMBER_ = t1.NUMBER_
      </if>
      <if test="minUpperNumber != null and minUpperNumber !=0">
        and t1.NUMBER_ &gt; #{minUpperNumber}
      </if>
      <if test="maxUpperNumber != null and maxUpperNumber !=0">
        and t1.NUMBER_ &lt; #{maxUpperNumber}
      </if>
       <if test="minActualNumber != null and minActualNumber !=0">
        and t1.ELC_NUMBER_ &gt; #{minActualNumber}
      </if>
      <if test="maxActualNumber != null and maxActualNumber !=0">
        and t1.ELC_NUMBER_ &lt; #{maxActualNumber}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(manArrangeFlag)">
        and t1.MAN_ARRANGE_FLAG_ = #{manArrangeFlag}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(courseCode)">
        and t3.COURSE_CODE_ = #{courseCode}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(courseName)">
        and t3.COURSE_NAME_ = #{courseName}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(campus)">
        and t1.CAMPUS_ = #{campus}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(projectId)">
        and t3.PROJ_ID_ = #{projectId}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(faculty)">
        and t3.FACULTY_ = #{faculty}
      </if>
      <if test="credits!=null and credits!=0">
        and t3.CREDITS_ = #{credits}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(keyword)">
  		and (t1.CODE_ like CONCAT(#{keyword}, '%') or t3.COURSE_CODE_ like CONCAT(#{keyword}, '%') OR t3.COURSE_NAME_ like CONCAT(#{keyword}, '%'))
  	  </if>
    </where>
       GROUP BY t1.ID_
  	  <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(teacherCode)">
  	    HAVING (select count(t4.id_) from teaching_class_teacher_t t4
  	    	where t4.TEACHING_CLASS_ID_ = t1.ID_ and t4.TYPE_=0 and t4.TEACHER_CODE_ = #{teacherCode} ) > 0
  	  </if>
	 )t8
	 <where>
	  <if test="minFirstTurnNum !=null and minFirstTurnNum !=0">
        and t8.firstTurnNum &gt; #{minFirstTurnNum}
      </if>
      <if test="maxFirstTurnNum !=null and maxFirstTurnNum !=0">
        and t8.firstTurnNum &lt; #{maxFirstTurnNum}
      </if>
      <if test="minSecondTurnNum !=null and minSecondTurnNum !=0">
        and t8.secondTurnNum &gt; #{minSecondTurnNum}
      </if>
      <if test="maxSecondTurnNum !=null and maxSecondTurnNum !=0">
        and t8.secondTurnNum &lt; #{maxSecondTurnNum}
      </if>
	 </where>
  </select>

  <select id="grduateListPage" parameterType="com.server.edu.election.query.ElcResultQuery" resultMap="TeachingClassVoMap">
    select distinct t1.ID_,t1.CODE_,t1.ELC_NUMBER_,t1.NUMBER_,t1.NAME_,
    	   t1.CAMPUS_,
    	   t3.COURSE_CODE_,t3.COURSE_NAME_,t3.NATURE_,t3.FACULTY_,t1.MAN_ARRANGE_FLAG_,
    	   room.ROOM_ID_ roomId
    	   <!-- t4.TEACHER_CODE_,t4.TEACHER_NAME_,room.ROOM_ID_ roomId -->
    from teaching_class_t  t1
		join teaching_task_t t2 ON t2.ID_ = t1.TASK_ID_
		join course_open_t t3 ON t3.ID_ = t2.COURSE_OPEN_ID_
		left join teaching_class_teacher_t t4 on t4.TEACHING_CLASS_ID_ = t1.ID_ and t4.TYPE_= 0
		left join teaching_class_arrange_time_t time on t1.ID_ = time.TEACHING_CLASS_ID_
		left join teaching_class_arrange_room_t room on room.ARRANGE_TIME_ID_ = time.ID_
    <where>
      t3.CALENDAR_ID_ = #{calendarId}
	  <!-- and time.TYPE_ = '2' -->
      and t1.MAN_ARRANGE_FLAG_ in(1,2,3)
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(faculty)">
        and t3.FACULTY_ = #{faculty}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(campus)">
        and t1.CAMPUS_ = #{campus}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(nature)">
        and t3.NATURE_ = #{nature}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(trainingLevel)">
        and t3.TRAINING_LEVEL_ = #{trainingLevel}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(projectId)">
        and t3.PROJ_ID_ = #{projectId}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(keyword)">
  		and (t1.CODE_ like CONCAT('%', #{keyword}, '%') OR t3.COURSE_NAME_ like CONCAT('%', #{keyword}, '%') OR t3.COURSE_CODE_ like CONCAT('%', #{keyword}, '%'))
  	  </if>
  	  <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(teacherCode)">
  	    and t4.TEACHER_CODE_ = #{teacherCode}
  	  </if>
    </where>
  </select>

    <select id="findTeachingClass" parameterType="com.server.edu.election.query.ElcResultQuery" resultMap="TeachingClassVoMap">
    select t1.*, t2.CAMPUS_, t3.COURSE_CODE_, t3.COURSE_NAME_, t3.CREDITS_ from
	teaching_class_t t1
	join teaching_task_t t2 ON t2.ID_ = t1.TASK_ID_
	join course_open_t t3 ON t3.ID_ = t2.COURSE_OPEN_ID_
    <where>
     t1.DEPLOY_FLAG_ &gt; 0
     <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(calendarId)">
        and t3.CALENDAR_ID_ = #{calendarId}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(teachingClassId)">
        and t1.ID_ = #{teachingClassId}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(teachingClassIds)">
        and t1.ID_ in
         <foreach collection="teachingClassIds" open="(" separator="," close=")" item="id">
            #{id}
         </foreach>
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(teachingClassCode)">
        and t1.CODE_ = #{teachingClassCode,jdbcType=VARCHAR}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(manArrangeFlag)">
        and t1.MAN_ARRANGE_FLAG_ = #{manArrangeFlag}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(courseCode)">
        and t3.COURSE_CODE_ = #{courseCode,jdbcType=VARCHAR}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(courseName)">
        and t3.COURSE_NAME_ = #{courseName,jdbcType=VARCHAR}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(campus)">
        and t2.CAMPUS_ = #{campus,jdbcType=VARCHAR}
      </if>
    </where>
  </select>

  <update id="increElcNumberAtomic">
  	update teaching_class_t set ELC_NUMBER_ = ELC_NUMBER_ + 1 where id_ = #{teachingClassId} and NUMBER_ > ELC_NUMBER_
  </update>

  <update id="increElcNumber">
  	update teaching_class_t set ELC_NUMBER_ = ELC_NUMBER_ + 1 where id_ = #{teachingClassId}
  </update>

  <update id="decrElcNumber">
  	update teaching_class_t set ELC_NUMBER_ = ELC_NUMBER_ - 1 where id_ = #{teachingClassId} and ELC_NUMBER_ > 0
  </update>

  <update id="increElcNumberList">
  	update teaching_class_t set ELC_NUMBER_ = ELC_NUMBER_ + 1 where id_ in
        <foreach collection="teachingClassIds" item="item" open="(" close=")" separator=",">
          #{item}
        </foreach>
  </update>

  <select id="selectOversize" resultMap="BaseResultMap">
  	select * from teaching_class_t where id_ = #{teachingClassId} and ELC_NUMBER_ > NUMBER_
  </select>

  <select id="findTeachingClasses" resultMap="BaseResultMap">
  	select * from teaching_class_t where ID_ in
      <foreach collection="list" item="id" open="(" close=")" separator=",">
          #{id}
      </foreach>
  </select>

  <select id="selectSuggestProfession" resultType="com.server.edu.election.dto.SuggestProfessionDto">
    select GRADE_ as grade,PROFESSION_ as profession,NUMBER_ as number 
    from teaching_class_suggest_profession_t where TEACHING_CLASS_ID_ = #{teachingClassId}
  </select>

  <select id="selectSuggestStudent" resultType="string">
  	select STUDENT_ID_ from teaching_class_suggest_student_t where TEACHING_CLASS_ID_ = #{teachingClassId}
  </select>

  <select id="selectSuggestCourse" resultType="com.server.edu.election.studentelec.context.ElecCourse">
  	SELECT cour.id_ as courseId, cour.code_ as courseCode, open.COURSE_NAME_ as courseName 
	from course_t cour
	join course_open_t open ON open.COURSE_CODE_ = cour.code_
	join teaching_task_t task ON task.COURSE_OPEN_ID_ = open.id_
	join teaching_class_t class ON task.id_ = class.TASK_ID_
	where(
		select TEACHING_CLASS_ID_ from teaching_class_suggest_student_t where STUDENT_ID_ = #{stu.studentId}
		UNION
		select TEACHING_CLASS_ID_ from teaching_class_suggest_profession_t 
		where GRADE_ = #{stu.grade} and PROFESSION_ = #{stu.major}
	)
	GROUP BY cour.id_, cour.code_, open.COURSE_NAME_ 
  </select>


    <select id="findTeacherNames" resultType="com.server.edu.election.entity.TeachingClassTeacher">
        select TEACHING_CLASS_ID_ teachingClassId,
        TEACHER_NAME_ teacherName
        from teaching_class_teacher_t
        where TEACHING_CLASS_ID_ in
        <foreach collection="teachingClassIds" open="(" separator="," close=")" item="id">
            #{id}
        </foreach>
    </select>

  <select id="getClassTimes" parameterType="java.util.List" resultType="com.server.edu.election.dto.TeacherClassTimeRoom">
		 SELECT
			t2.ID_ teachClassId,
			t3.ID_ arrangeTimeId,
			t3.TIME_START_ timeStart,
			t3.TIME_END_ timeEnd,
			t3.DAY_OF_WEEK_ dayOfWeek,
			t4.WEEK_NUMBER_ weekNumber,
			t4.ROOM_ID_ roomId,
			t4.TEACHER_CODE_ teacherCode
		FROM
		teaching_class_t t2
		JOIN teaching_class_arrange_time_t t3 ON t2.ID_ = t3.TEACHING_CLASS_ID_
		JOIN teaching_class_arrange_room_t t4 ON t4.ARRANGE_TIME_ID_ = t3.ID_
		WHERE
		t2.ID_ in
        <foreach collection="list" open="(" separator="," close=")" item="id">
            #{id}
         </foreach>
   </select>

   <select id="selectDrawClasss" parameterType="com.server.edu.election.dto.ElcNumberSetDto" resultType="com.server.edu.election.vo.TeachingClassVo">
		SELECT
			t2.ID_ id,
			t2.CODE_ code,
			COUNT(t1.ID_) withdrawNum
		FROM
			election_log_t_${index} t1
		INNER JOIN teaching_class_t t2 ON t1.TEACHING_CLASS_CODE_ = t2.CODE_ AND t2.DEPLOY_FLAG_ &gt; 0
		INNER JOIN teaching_task_t t3 ON t2.TASK_ID_ = t3.ID_
		INNER JOIN course_open_t t4 ON (
			t4.ID_ = t3.COURSE_OPEN_ID_
			AND t1.CALENDAR_ID_ = t4.CALENDAR_ID_
		)
		<where>
		<if test="@com.server.edu.util.MybatisUtil@isNotEmpty(calendarId)">
		    t1.CALENDAR_ID_ = #{calendarId}
		</if>
		<if test="@com.server.edu.util.MybatisUtil@isNotEmpty(turns)">
	        AND t1.TURN_ IN
	        <foreach item="id" collection="turns" index="index" open="(" separator="," close=")">
	          #{id}
	        </foreach>
        </if>
        </where>
		GROUP BY
			t2.ID_
   </select>

   <update id="batchDecrElcNumber" parameterType="java.util.List">
    <foreach item="item" collection="list" index="index"
      separator=";">
      update teaching_class_t set ELC_NUMBER_ = ELC_NUMBER_ - #{item.withdrawNum} where
      id_ = #{item.id} and ELC_NUMBER_ > 0
    </foreach>
   </update>

   <update id="updateReserveProportion" parameterType="java.util.List">
    <foreach item="item" collection="list" index="index"
      separator=";">
      update teaching_class_t set RESERVE_NUMBER_ = #{item.reserveNumber} where
      ID_ = #{item.id}
    </foreach>
   </update>

    <select id="findClassCodeAndFaculty" resultType="com.server.edu.election.vo.ElcStudentVo">
        select
        t1.ID_ teachingClassId,t1.CODE_ classCode,co.FACULTY_ faculty
        from teaching_class_t t1
        join teaching_task_t t2 on t2.ID_=t1.TASK_ID_
        left join course_open_t co on co.ID_ = t2.COURSE_OPEN_ID_
        where t1.ID_ in
        <foreach item="item" collection="teachingClassIds" separator="," open="(" close=")" >
            #{item}
        </foreach>
    </select>

    <select id="findTrainingLevel" resultType="java.lang.String">
        select co.TRAINING_LEVEL_
        from course_open_t co
        join teaching_task_t ts on ts.COURSE_OPEN_ID_ = co.ID_
        join teaching_class_t tc on tc.TASK_ID_ = ts.ID_
        where tc.ID_ = #{teachingClassId}
    </select>

</mapper>