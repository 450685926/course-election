<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.server.edu.exam.dao.GraduateExamLogDao">
  <resultMap id="BaseResultMap" type="com.server.edu.exam.entity.GraduateExamLog">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="ID_" jdbcType="BIGINT" property="id" />
    <result column="STUDENT_CODE_" jdbcType="VARCHAR" property="studentCode" />
    <result column="ROOM_ID_" jdbcType="BIGINT" property="roomId" />
    <result column="ROOM_NAME_" jdbcType="VARCHAR" property="roomName" />
    <result column="EXAM_INFO_ID_" jdbcType="BIGINT" property="examInfoId" />
    <result column="EXAM_TYPE_" jdbcType="INTEGER" property="examType" />
    <result column="OPERATOR_CODE_" jdbcType="VARCHAR" property="operatorCode" />
    <result column="OPERATOR_NAME_" jdbcType="VARCHAR" property="operatorName" />
    <result column="IP_" jdbcType="VARCHAR" property="ip" />
    <result column="CREATE_AT_" jdbcType="TIMESTAMP" property="createAt" />
    <result column="UPDATE_AT_" jdbcType="TIMESTAMP" property="updateAt" />
    <result column="REMARK_" jdbcType="VARCHAR" property="remark" />
  </resultMap>

  <select id="listGraduateExamLog" resultType="com.server.edu.exam.vo.GraduateExamLogVo" parameterType="com.server.edu.exam.query.GraduateExamLogQuery">
    select t1.ID_ id,t1.STUDENT_CODE_ studentCode,t5.NAME_ studentName,t2.COURSE_CODE_ courseCode,t4.NAME_ courseName,t2.CAMPUS_ campus,t1.ROOM_NAME_ roomName,t1.EXAM_TYPE_ examType,t1.OPERATOR_CODE_ operatorCode,
    t1.OPERATOR_NAME_ operatorName,t1.CREATE_AT_ createAt,t1.IP_ ip,t2.EXAM_TIME_ examTime
    from graduate_exam_log_t t1
    left join graduate_exam_info_t t2 on t1.EXAM_INFO_ID_ = t2.ID_
    left join course_t t4 on t2.COURSE_CODE_ = t4.CODE_
    left join student_t t5 on t1.STUDENT_CODE_ = t5.STUDENT_CODE_
    <where>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(campus)">
        and t2.CAMPUS_ = #{campus}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(roomId)">
        and t1.ROOM_ID_ = #{roomId}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(examType)">
        and t1.EXAM_TYPE_ = #{examType}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(operator)">
        and (t1.OPERATOR_CODE_ like concat('%',#{operator},'%') or t1.OPERATOR_NAME_ like concat('%',#{operator},'%') )
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(operatorStratTime)">
        <![CDATA[ and DATE_FORMAT(t1.CREATE_AT_,'%Y-%m-%d') = DATE_FORMAT(#{operatorStratTime},'%Y-%m-%d')]]>
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(examStartTime)">
        <![CDATA[ and DATE_FORMAT(t2.EXAM_DATE_,'%Y-%m-%d') = DATE_FORMAT(#{examStartTime},'%Y-%m-%d')]]>
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(projId)">
        and t2.PROJ_ID_ = #{projId}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(calendarId)">
        and t2.CALENDAR_ID_ = #{calendarId}
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(keyword)">
        and (t5.STUDENT_CODE_ like concat('%',#{keyword},'%') or t5.NAME_ like concat('%',#{keyword},'%')
        or t4.CODE_ like concat('%',#{keyword},'%') or t4.NAME_ like concat('%',#{keyword},'%'))
      </if>
      <if test="@com.server.edu.util.MybatisUtil@isNotEmpty(ids)">
        and t1.ID_ in
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
          #{id}
        </foreach>
      </if>
    </where>
    order by t1.ID_ desc
  </select>

  <insert id="insertBatchs" parameterType="com.server.edu.exam.vo.GraduateExamStudentVo">
    insert into graduate_exam_log_t (STUDENT_CODE_,ROOM_ID_,ROOM_NAME_,EXAM_INFO_ID_,EXAM_TYPE_,OPERATOR_CODE_,OPERATOR_NAME_,IP_,CREATE_AT_)
    VALUES
    <foreach collection="list" item="item" separator=",">
      (
      #{item.studentCode},
      #{item.roomId},
      #{item.roomName},
      #{item.examInfoId},
      #{item.examType},
      #{item.operatorCode},
      #{item.operatorName},
      #{item.ip},
      #{item.createAt}
      )
    </foreach>
  </insert>
</mapper>